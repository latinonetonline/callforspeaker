/* tslint:disable */
/* eslint-disable */
/**
 * LatinoNetOnline.Backend.V1 v1
 * A application with Swagger, Swashbuckle, and API versioning.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: lautaro.carro@latinonet.online
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ConfirmProposalInput
 */
export interface ConfirmProposalInput {
    /**
     * 
     * @type {string}
     * @memberof ConfirmProposalInput
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface CreateProposalRequest
 */
export interface CreateProposalRequest {
    /**
     * 
     * @type {Array<CreateSpeakerInput>}
     * @memberof CreateProposalRequest
     */
    'speakers'?: Array<CreateSpeakerInput> | null;
    /**
     * 
     * @type {string}
     * @memberof CreateProposalRequest
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateProposalRequest
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateProposalRequest
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProposalRequest
     */
    'audienceAnswer'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateProposalRequest
     */
    'knowledgeAnswer'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateProposalRequest
     */
    'useCaseAnswer'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateSpeakerInput
 */
export interface CreateSpeakerInput {
    /**
     * 
     * @type {string}
     * @memberof CreateSpeakerInput
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateSpeakerInput
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateSpeakerInput
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateSpeakerInput
     */
    'twitter'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateSpeakerInput
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateSpeakerInput
     */
    'image'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateUnavailableDateInput
 */
export interface CreateUnavailableDateInput {
    /**
     * 
     * @type {string}
     * @memberof CreateUnavailableDateInput
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUnavailableDateInput
     */
    'reason'?: string | null;
}
/**
 * 
 * @export
 * @interface ErrorResult
 */
export interface ErrorResult {
    /**
     * 
     * @type {string}
     * @memberof ErrorResult
     */
    'code'?: string | null;
}
/**
 * 
 * @export
 * @interface Link
 */
export interface Link {
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'url'?: string | null;
}
/**
 * 
 * @export
 * @interface OperationResult
 */
export interface OperationResult {
    /**
     * 
     * @type {boolean}
     * @memberof OperationResult
     */
    'isSuccess'?: boolean;
    /**
     * 
     * @type {ErrorResult}
     * @memberof OperationResult
     */
    'error'?: ErrorResult;
}
/**
 * 
 * @export
 * @interface ProposalDateDto
 */
export interface ProposalDateDto {
    /**
     * 
     * @type {Array<string>}
     * @memberof ProposalDateDto
     */
    'dates'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface ProposalDateDtoOperationResult
 */
export interface ProposalDateDtoOperationResult {
    /**
     * 
     * @type {boolean}
     * @memberof ProposalDateDtoOperationResult
     */
    'isSuccess'?: boolean;
    /**
     * 
     * @type {ErrorResult}
     * @memberof ProposalDateDtoOperationResult
     */
    'error'?: ErrorResult;
    /**
     * 
     * @type {ProposalDateDto}
     * @memberof ProposalDateDtoOperationResult
     */
    'result'?: ProposalDateDto;
}
/**
 * 
 * @export
 * @interface ProposalDto
 */
export interface ProposalDto {
    /**
     * 
     * @type {string}
     * @memberof ProposalDto
     */
    'proposalId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProposalDto
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProposalDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProposalDto
     */
    'eventDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProposalDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProposalDto
     */
    'audienceAnswer'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProposalDto
     */
    'knowledgeAnswer'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProposalDto
     */
    'useCaseAnswer'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ProposalDto
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ProposalDto
     */
    'webinarNumber'?: number | null;
    /**
     * 
     * @type {WebinarStatus}
     * @memberof ProposalDto
     */
    'status'?: WebinarStatus;
    /**
     * 
     * @type {string}
     * @memberof ProposalDto
     */
    'meetup'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProposalDto
     */
    'streamyard'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProposalDto
     */
    'liveStreaming'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProposalDto
     */
    'flyer'?: string | null;
}
/**
 * 
 * @export
 * @interface ProposalFullDto
 */
export interface ProposalFullDto {
    /**
     * 
     * @type {ProposalDto}
     * @memberof ProposalFullDto
     */
    'proposal'?: ProposalDto;
    /**
     * 
     * @type {Array<SpeakerDto>}
     * @memberof ProposalFullDto
     */
    'speakers'?: Array<SpeakerDto> | null;
}
/**
 * 
 * @export
 * @interface ProposalFullDtoOperationResult
 */
export interface ProposalFullDtoOperationResult {
    /**
     * 
     * @type {boolean}
     * @memberof ProposalFullDtoOperationResult
     */
    'isSuccess'?: boolean;
    /**
     * 
     * @type {ErrorResult}
     * @memberof ProposalFullDtoOperationResult
     */
    'error'?: ErrorResult;
    /**
     * 
     * @type {ProposalFullDto}
     * @memberof ProposalFullDtoOperationResult
     */
    'result'?: ProposalFullDto;
}
/**
 * 
 * @export
 * @interface SendNotificationInput
 */
export interface SendNotificationInput {
    /**
     * 
     * @type {Array<string>}
     * @memberof SendNotificationInput
     */
    'devices'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof SendNotificationInput
     */
    'message'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SendNotificationInput
     */
    'url'?: string | null;
}
/**
 * 
 * @export
 * @interface SpeakerDto
 */
export interface SpeakerDto {
    /**
     * 
     * @type {string}
     * @memberof SpeakerDto
     */
    'speakerId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SpeakerDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SpeakerDto
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SpeakerDto
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SpeakerDto
     */
    'twitter'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SpeakerDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SpeakerDto
     */
    'image'?: string | null;
}
/**
 * 
 * @export
 * @interface SpeakerDtoArrayOperationResult
 */
export interface SpeakerDtoArrayOperationResult {
    /**
     * 
     * @type {boolean}
     * @memberof SpeakerDtoArrayOperationResult
     */
    'isSuccess'?: boolean;
    /**
     * 
     * @type {ErrorResult}
     * @memberof SpeakerDtoArrayOperationResult
     */
    'error'?: ErrorResult;
    /**
     * 
     * @type {Array<SpeakerDto>}
     * @memberof SpeakerDtoArrayOperationResult
     */
    'result'?: Array<SpeakerDto> | null;
}
/**
 * 
 * @export
 * @interface SpeakerDtoOperationResult
 */
export interface SpeakerDtoOperationResult {
    /**
     * 
     * @type {boolean}
     * @memberof SpeakerDtoOperationResult
     */
    'isSuccess'?: boolean;
    /**
     * 
     * @type {ErrorResult}
     * @memberof SpeakerDtoOperationResult
     */
    'error'?: ErrorResult;
    /**
     * 
     * @type {SpeakerDto}
     * @memberof SpeakerDtoOperationResult
     */
    'result'?: SpeakerDto;
}
/**
 * 
 * @export
 * @interface SubscribeDeviceInput
 */
export interface SubscribeDeviceInput {
    /**
     * 
     * @type {string}
     * @memberof SubscribeDeviceInput
     */
    'pushEndpoint'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SubscribeDeviceInput
     */
    'pushP256DH'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SubscribeDeviceInput
     */
    'pushAuth'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SubscribeDeviceInput
     */
    'userId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SubscribeDeviceInput
     */
    'userAgent'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateProposalInput
 */
export interface UpdateProposalInput {
    /**
     * 
     * @type {string}
     * @memberof UpdateProposalInput
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProposalInput
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProposalInput
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProposalInput
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProposalInput
     */
    'audienceAnswer'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProposalInput
     */
    'knowledgeAnswer'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProposalInput
     */
    'useCaseAnswer'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UpdateProposalInput
     */
    'webinarNumber'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProposalInput
     */
    'meetup'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProposalInput
     */
    'streamyard'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProposalInput
     */
    'liveStreaming'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProposalInput
     */
    'flyer'?: string | null;
    /**
     * 
     * @type {Array<UpdateSpeakerInput>}
     * @memberof UpdateProposalInput
     */
    'speakers'?: Array<UpdateSpeakerInput> | null;
}
/**
 * 
 * @export
 * @interface UpdateSpeakerInput
 */
export interface UpdateSpeakerInput {
    /**
     * 
     * @type {string}
     * @memberof UpdateSpeakerInput
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateSpeakerInput
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateSpeakerInput
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateSpeakerInput
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateSpeakerInput
     */
    'twitter'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateSpeakerInput
     */
    'description'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateUnavailableDateInput
 */
export interface UpdateUnavailableDateInput {
    /**
     * 
     * @type {string}
     * @memberof UpdateUnavailableDateInput
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUnavailableDateInput
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUnavailableDateInput
     */
    'reason'?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const WebinarStatus = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type WebinarStatus = typeof WebinarStatus[keyof typeof WebinarStatus];



/**
 * DevicesApi - axios parameter creator
 * @export
 */
export const DevicesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NotificationsModuleDevicesGenerateVapidKeysGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/notifications-module/Devices/GenerateVapidKeys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<string>} [users] 
         * @param {string} [name] 
         * @param {string} [operativeSystem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NotificationsModuleDevicesGet: async (users?: Array<string>, name?: string, operativeSystem?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/notifications-module/Devices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (users) {
                localVarQueryParameter['Users'] = users;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (operativeSystem !== undefined) {
                localVarQueryParameter['OperativeSystem'] = operativeSystem;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NotificationsModuleDevicesGetVapidPublicKeyGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/notifications-module/Devices/GetVapidPublicKey`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NotificationsModuleDevicesIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1NotificationsModuleDevicesIdDelete', 'id', id)
            const localVarPath = `/api/v1/notifications-module/Devices/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SendNotificationInput} [sendNotificationInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NotificationsModuleDevicesSendNotificationPost: async (sendNotificationInput?: SendNotificationInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/notifications-module/Devices/SendNotification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendNotificationInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SubscribeDeviceInput} [subscribeDeviceInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NotificationsModuleDevicesSubscribePost: async (subscribeDeviceInput?: SubscribeDeviceInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/notifications-module/Devices/Subscribe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subscribeDeviceInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DevicesApi - functional programming interface
 * @export
 */
export const DevicesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DevicesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1NotificationsModuleDevicesGenerateVapidKeysGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1NotificationsModuleDevicesGenerateVapidKeysGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Array<string>} [users] 
         * @param {string} [name] 
         * @param {string} [operativeSystem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1NotificationsModuleDevicesGet(users?: Array<string>, name?: string, operativeSystem?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1NotificationsModuleDevicesGet(users, name, operativeSystem, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1NotificationsModuleDevicesGetVapidPublicKeyGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1NotificationsModuleDevicesGetVapidPublicKeyGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1NotificationsModuleDevicesIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1NotificationsModuleDevicesIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SendNotificationInput} [sendNotificationInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1NotificationsModuleDevicesSendNotificationPost(sendNotificationInput?: SendNotificationInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1NotificationsModuleDevicesSendNotificationPost(sendNotificationInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SubscribeDeviceInput} [subscribeDeviceInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1NotificationsModuleDevicesSubscribePost(subscribeDeviceInput?: SubscribeDeviceInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1NotificationsModuleDevicesSubscribePost(subscribeDeviceInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DevicesApi - factory interface
 * @export
 */
export const DevicesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DevicesApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NotificationsModuleDevicesGenerateVapidKeysGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiV1NotificationsModuleDevicesGenerateVapidKeysGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<string>} [users] 
         * @param {string} [name] 
         * @param {string} [operativeSystem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NotificationsModuleDevicesGet(users?: Array<string>, name?: string, operativeSystem?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1NotificationsModuleDevicesGet(users, name, operativeSystem, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NotificationsModuleDevicesGetVapidPublicKeyGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiV1NotificationsModuleDevicesGetVapidPublicKeyGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NotificationsModuleDevicesIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1NotificationsModuleDevicesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SendNotificationInput} [sendNotificationInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NotificationsModuleDevicesSendNotificationPost(sendNotificationInput?: SendNotificationInput, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1NotificationsModuleDevicesSendNotificationPost(sendNotificationInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SubscribeDeviceInput} [subscribeDeviceInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NotificationsModuleDevicesSubscribePost(subscribeDeviceInput?: SubscribeDeviceInput, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1NotificationsModuleDevicesSubscribePost(subscribeDeviceInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DevicesApi - object-oriented interface
 * @export
 * @class DevicesApi
 * @extends {BaseAPI}
 */
export class DevicesApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public apiV1NotificationsModuleDevicesGenerateVapidKeysGet(options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).apiV1NotificationsModuleDevicesGenerateVapidKeysGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<string>} [users] 
     * @param {string} [name] 
     * @param {string} [operativeSystem] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public apiV1NotificationsModuleDevicesGet(users?: Array<string>, name?: string, operativeSystem?: string, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).apiV1NotificationsModuleDevicesGet(users, name, operativeSystem, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public apiV1NotificationsModuleDevicesGetVapidPublicKeyGet(options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).apiV1NotificationsModuleDevicesGetVapidPublicKeyGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public apiV1NotificationsModuleDevicesIdDelete(id: string, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).apiV1NotificationsModuleDevicesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SendNotificationInput} [sendNotificationInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public apiV1NotificationsModuleDevicesSendNotificationPost(sendNotificationInput?: SendNotificationInput, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).apiV1NotificationsModuleDevicesSendNotificationPost(sendNotificationInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SubscribeDeviceInput} [subscribeDeviceInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public apiV1NotificationsModuleDevicesSubscribePost(subscribeDeviceInput?: SubscribeDeviceInput, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).apiV1NotificationsModuleDevicesSubscribePost(subscribeDeviceInput, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * HomeApi - axios parameter creator
 * @export
 */
export const HomeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LinksModuleGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/links-module`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NotificationsModuleGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/notifications-module`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebinarsModuleGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/webinars-module`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HomeApi - functional programming interface
 * @export
 */
export const HomeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HomeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LinksModuleGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LinksModuleGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1NotificationsModuleGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1NotificationsModuleGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WebinarsModuleGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WebinarsModuleGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HomeApi - factory interface
 * @export
 */
export const HomeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HomeApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LinksModuleGet(options?: any): AxiosPromise<string> {
            return localVarFp.apiV1LinksModuleGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NotificationsModuleGet(options?: any): AxiosPromise<string> {
            return localVarFp.apiV1NotificationsModuleGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebinarsModuleGet(options?: any): AxiosPromise<string> {
            return localVarFp.apiV1WebinarsModuleGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HomeApi - object-oriented interface
 * @export
 * @class HomeApi
 * @extends {BaseAPI}
 */
export class HomeApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeApi
     */
    public apiV1LinksModuleGet(options?: AxiosRequestConfig) {
        return HomeApiFp(this.configuration).apiV1LinksModuleGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeApi
     */
    public apiV1NotificationsModuleGet(options?: AxiosRequestConfig) {
        return HomeApiFp(this.configuration).apiV1NotificationsModuleGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeApi
     */
    public apiV1WebinarsModuleGet(options?: AxiosRequestConfig) {
        return HomeApiFp(this.configuration).apiV1WebinarsModuleGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ImagesApi - axios parameter creator
 * @export
 */
export const ImagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadImage: async (file?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/webinars-module/Images`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImagesApi - functional programming interface
 * @export
 */
export const ImagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ImagesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadImage(file?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadImage(file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ImagesApi - factory interface
 * @export
 */
export const ImagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ImagesApiFp(configuration)
    return {
        /**
         * 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadImage(file?: any, options?: any): AxiosPromise<OperationResult> {
            return localVarFp.uploadImage(file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ImagesApi - object-oriented interface
 * @export
 * @class ImagesApi
 * @extends {BaseAPI}
 */
export class ImagesApi extends BaseAPI {
    /**
     * 
     * @param {any} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApi
     */
    public uploadImage(file?: any, options?: AxiosRequestConfig) {
        return ImagesApiFp(this.configuration).uploadImage(file, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LinksApi - axios parameter creator
 * @export
 */
export const LinksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LinksModuleLinksGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/links-module/Links`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LinksModuleLinksNameDelete: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('apiV1LinksModuleLinksNameDelete', 'name', name)
            const localVarPath = `/api/v1/links-module/Links/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LinksModuleLinksNameGet: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('apiV1LinksModuleLinksNameGet', 'name', name)
            const localVarPath = `/api/v1/links-module/Links/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Link} [link] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LinksModuleLinksPost: async (link?: Link, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/links-module/Links`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(link, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Link} [link] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LinksModuleLinksPut: async (link?: Link, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/links-module/Links`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(link, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LinksApi - functional programming interface
 * @export
 */
export const LinksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LinksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LinksModuleLinksGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LinksModuleLinksGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LinksModuleLinksNameDelete(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LinksModuleLinksNameDelete(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LinksModuleLinksNameGet(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LinksModuleLinksNameGet(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Link} [link] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LinksModuleLinksPost(link?: Link, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LinksModuleLinksPost(link, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Link} [link] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LinksModuleLinksPut(link?: Link, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LinksModuleLinksPut(link, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LinksApi - factory interface
 * @export
 */
export const LinksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LinksApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LinksModuleLinksGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiV1LinksModuleLinksGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LinksModuleLinksNameDelete(name: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1LinksModuleLinksNameDelete(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LinksModuleLinksNameGet(name: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1LinksModuleLinksNameGet(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Link} [link] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LinksModuleLinksPost(link?: Link, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1LinksModuleLinksPost(link, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Link} [link] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LinksModuleLinksPut(link?: Link, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1LinksModuleLinksPut(link, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LinksApi - object-oriented interface
 * @export
 * @class LinksApi
 * @extends {BaseAPI}
 */
export class LinksApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinksApi
     */
    public apiV1LinksModuleLinksGet(options?: AxiosRequestConfig) {
        return LinksApiFp(this.configuration).apiV1LinksModuleLinksGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinksApi
     */
    public apiV1LinksModuleLinksNameDelete(name: string, options?: AxiosRequestConfig) {
        return LinksApiFp(this.configuration).apiV1LinksModuleLinksNameDelete(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinksApi
     */
    public apiV1LinksModuleLinksNameGet(name: string, options?: AxiosRequestConfig) {
        return LinksApiFp(this.configuration).apiV1LinksModuleLinksNameGet(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Link} [link] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinksApi
     */
    public apiV1LinksModuleLinksPost(link?: Link, options?: AxiosRequestConfig) {
        return LinksApiFp(this.configuration).apiV1LinksModuleLinksPost(link, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Link} [link] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinksApi
     */
    public apiV1LinksModuleLinksPut(link?: Link, options?: AxiosRequestConfig) {
        return LinksApiFp(this.configuration).apiV1LinksModuleLinksPut(link, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MetricoolApi - axios parameter creator
 * @export
 */
export const MetricoolApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} proposalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebinarsModuleMetricoolProposalsProposalIdGet: async (proposalId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'proposalId' is not null or undefined
            assertParamExists('apiV1WebinarsModuleMetricoolProposalsProposalIdGet', 'proposalId', proposalId)
            const localVarPath = `/api/v1/webinars-module/Metricool/proposals/{proposalId}`
                .replace(`{${"proposalId"}}`, encodeURIComponent(String(proposalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetricoolApi - functional programming interface
 * @export
 */
export const MetricoolApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MetricoolApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} proposalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WebinarsModuleMetricoolProposalsProposalIdGet(proposalId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WebinarsModuleMetricoolProposalsProposalIdGet(proposalId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MetricoolApi - factory interface
 * @export
 */
export const MetricoolApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MetricoolApiFp(configuration)
    return {
        /**
         * 
         * @param {string} proposalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebinarsModuleMetricoolProposalsProposalIdGet(proposalId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1WebinarsModuleMetricoolProposalsProposalIdGet(proposalId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MetricoolApi - object-oriented interface
 * @export
 * @class MetricoolApi
 * @extends {BaseAPI}
 */
export class MetricoolApi extends BaseAPI {
    /**
     * 
     * @param {string} proposalId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricoolApi
     */
    public apiV1WebinarsModuleMetricoolProposalsProposalIdGet(proposalId: string, options?: AxiosRequestConfig) {
        return MetricoolApiFp(this.configuration).apiV1WebinarsModuleMetricoolProposalsProposalIdGet(proposalId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProposalsApi - axios parameter creator
 * @export
 */
export const ProposalsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebinarsModuleProposalsAllDelete: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/webinars-module/Proposals/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ConfirmProposalInput} [confirmProposalInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebinarsModuleProposalsConfirmPost: async (confirmProposalInput?: ConfirmProposalInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/webinars-module/Proposals/Confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(confirmProposalInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [title] 
         * @param {string} [date] 
         * @param {boolean} [isActive] 
         * @param {boolean} [oldest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebinarsModuleProposalsGet: async (title?: string, date?: string, isActive?: boolean, oldest?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/webinars-module/Proposals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (title !== undefined) {
                localVarQueryParameter['Title'] = title;
            }

            if (date !== undefined) {
                localVarQueryParameter['Date'] = (date as any instanceof Date) ?
                    (date as any).toISOString() :
                    date;
            }

            if (isActive !== undefined) {
                localVarQueryParameter['IsActive'] = isActive;
            }

            if (oldest !== undefined) {
                localVarQueryParameter['Oldest'] = oldest;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebinarsModuleProposalsIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1WebinarsModuleProposalsIdDelete', 'id', id)
            const localVarPath = `/api/v1/webinars-module/Proposals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebinarsModuleProposalsIdDescriptionGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1WebinarsModuleProposalsIdDescriptionGet', 'id', id)
            const localVarPath = `/api/v1/webinars-module/Proposals/{id}/Description`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebinarsModuleProposalsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1WebinarsModuleProposalsIdGet', 'id', id)
            const localVarPath = `/api/v1/webinars-module/Proposals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebinarsModuleProposalsIdPhotoPost: async (id: string, file?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1WebinarsModuleProposalsIdPhotoPost', 'id', id)
            const localVarPath = `/api/v1/webinars-module/Proposals/{id}/Photo`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateProposalInput} [updateProposalInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebinarsModuleProposalsPut: async (updateProposalInput?: UpdateProposalInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/webinars-module/Proposals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProposalInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebinarsModuleProposalsUpdateNumbersPut: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/webinars-module/Proposals/UpdateNumbers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateProposalRequest} [createProposalRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProposal: async (createProposalRequest?: CreateProposalRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/webinars-module/Proposals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProposalRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDates: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/webinars-module/Proposals/dates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProposalsApi - functional programming interface
 * @export
 */
export const ProposalsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProposalsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WebinarsModuleProposalsAllDelete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WebinarsModuleProposalsAllDelete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ConfirmProposalInput} [confirmProposalInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WebinarsModuleProposalsConfirmPost(confirmProposalInput?: ConfirmProposalInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WebinarsModuleProposalsConfirmPost(confirmProposalInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [title] 
         * @param {string} [date] 
         * @param {boolean} [isActive] 
         * @param {boolean} [oldest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WebinarsModuleProposalsGet(title?: string, date?: string, isActive?: boolean, oldest?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WebinarsModuleProposalsGet(title, date, isActive, oldest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WebinarsModuleProposalsIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WebinarsModuleProposalsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WebinarsModuleProposalsIdDescriptionGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WebinarsModuleProposalsIdDescriptionGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WebinarsModuleProposalsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WebinarsModuleProposalsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WebinarsModuleProposalsIdPhotoPost(id: string, file?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WebinarsModuleProposalsIdPhotoPost(id, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateProposalInput} [updateProposalInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WebinarsModuleProposalsPut(updateProposalInput?: UpdateProposalInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WebinarsModuleProposalsPut(updateProposalInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WebinarsModuleProposalsUpdateNumbersPut(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WebinarsModuleProposalsUpdateNumbersPut(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateProposalRequest} [createProposalRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProposal(createProposalRequest?: CreateProposalRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProposalFullDtoOperationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProposal(createProposalRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDates(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProposalDateDtoOperationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDates(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProposalsApi - factory interface
 * @export
 */
export const ProposalsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProposalsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebinarsModuleProposalsAllDelete(options?: any): AxiosPromise<void> {
            return localVarFp.apiV1WebinarsModuleProposalsAllDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ConfirmProposalInput} [confirmProposalInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebinarsModuleProposalsConfirmPost(confirmProposalInput?: ConfirmProposalInput, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1WebinarsModuleProposalsConfirmPost(confirmProposalInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [title] 
         * @param {string} [date] 
         * @param {boolean} [isActive] 
         * @param {boolean} [oldest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebinarsModuleProposalsGet(title?: string, date?: string, isActive?: boolean, oldest?: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1WebinarsModuleProposalsGet(title, date, isActive, oldest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebinarsModuleProposalsIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1WebinarsModuleProposalsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebinarsModuleProposalsIdDescriptionGet(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1WebinarsModuleProposalsIdDescriptionGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebinarsModuleProposalsIdGet(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1WebinarsModuleProposalsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebinarsModuleProposalsIdPhotoPost(id: string, file?: any, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1WebinarsModuleProposalsIdPhotoPost(id, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateProposalInput} [updateProposalInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebinarsModuleProposalsPut(updateProposalInput?: UpdateProposalInput, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1WebinarsModuleProposalsPut(updateProposalInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebinarsModuleProposalsUpdateNumbersPut(options?: any): AxiosPromise<void> {
            return localVarFp.apiV1WebinarsModuleProposalsUpdateNumbersPut(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateProposalRequest} [createProposalRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProposal(createProposalRequest?: CreateProposalRequest, options?: any): AxiosPromise<ProposalFullDtoOperationResult> {
            return localVarFp.createProposal(createProposalRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDates(options?: any): AxiosPromise<ProposalDateDtoOperationResult> {
            return localVarFp.getDates(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProposalsApi - object-oriented interface
 * @export
 * @class ProposalsApi
 * @extends {BaseAPI}
 */
export class ProposalsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProposalsApi
     */
    public apiV1WebinarsModuleProposalsAllDelete(options?: AxiosRequestConfig) {
        return ProposalsApiFp(this.configuration).apiV1WebinarsModuleProposalsAllDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ConfirmProposalInput} [confirmProposalInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProposalsApi
     */
    public apiV1WebinarsModuleProposalsConfirmPost(confirmProposalInput?: ConfirmProposalInput, options?: AxiosRequestConfig) {
        return ProposalsApiFp(this.configuration).apiV1WebinarsModuleProposalsConfirmPost(confirmProposalInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [title] 
     * @param {string} [date] 
     * @param {boolean} [isActive] 
     * @param {boolean} [oldest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProposalsApi
     */
    public apiV1WebinarsModuleProposalsGet(title?: string, date?: string, isActive?: boolean, oldest?: boolean, options?: AxiosRequestConfig) {
        return ProposalsApiFp(this.configuration).apiV1WebinarsModuleProposalsGet(title, date, isActive, oldest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProposalsApi
     */
    public apiV1WebinarsModuleProposalsIdDelete(id: string, options?: AxiosRequestConfig) {
        return ProposalsApiFp(this.configuration).apiV1WebinarsModuleProposalsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProposalsApi
     */
    public apiV1WebinarsModuleProposalsIdDescriptionGet(id: string, options?: AxiosRequestConfig) {
        return ProposalsApiFp(this.configuration).apiV1WebinarsModuleProposalsIdDescriptionGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProposalsApi
     */
    public apiV1WebinarsModuleProposalsIdGet(id: string, options?: AxiosRequestConfig) {
        return ProposalsApiFp(this.configuration).apiV1WebinarsModuleProposalsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {any} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProposalsApi
     */
    public apiV1WebinarsModuleProposalsIdPhotoPost(id: string, file?: any, options?: AxiosRequestConfig) {
        return ProposalsApiFp(this.configuration).apiV1WebinarsModuleProposalsIdPhotoPost(id, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateProposalInput} [updateProposalInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProposalsApi
     */
    public apiV1WebinarsModuleProposalsPut(updateProposalInput?: UpdateProposalInput, options?: AxiosRequestConfig) {
        return ProposalsApiFp(this.configuration).apiV1WebinarsModuleProposalsPut(updateProposalInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProposalsApi
     */
    public apiV1WebinarsModuleProposalsUpdateNumbersPut(options?: AxiosRequestConfig) {
        return ProposalsApiFp(this.configuration).apiV1WebinarsModuleProposalsUpdateNumbersPut(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateProposalRequest} [createProposalRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProposalsApi
     */
    public createProposal(createProposalRequest?: CreateProposalRequest, options?: AxiosRequestConfig) {
        return ProposalsApiFp(this.configuration).createProposal(createProposalRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProposalsApi
     */
    public getDates(options?: AxiosRequestConfig) {
        return ProposalsApiFp(this.configuration).getDates(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SpeakersApi - axios parameter creator
 * @export
 */
export const SpeakersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSpeakers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/webinars-module/Speakers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpeaker: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/webinars-module/Speakers/Me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSpeakers: async (search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/webinars-module/Speakers/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SpeakersApi - functional programming interface
 * @export
 */
export const SpeakersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SpeakersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSpeakers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpeakerDtoArrayOperationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSpeakers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpeaker(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpeakerDtoOperationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpeaker(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchSpeakers(search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpeakerDtoArrayOperationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchSpeakers(search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SpeakersApi - factory interface
 * @export
 */
export const SpeakersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SpeakersApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSpeakers(options?: any): AxiosPromise<SpeakerDtoArrayOperationResult> {
            return localVarFp.getAllSpeakers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpeaker(options?: any): AxiosPromise<SpeakerDtoOperationResult> {
            return localVarFp.getSpeaker(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSpeakers(search?: string, options?: any): AxiosPromise<SpeakerDtoArrayOperationResult> {
            return localVarFp.searchSpeakers(search, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SpeakersApi - object-oriented interface
 * @export
 * @class SpeakersApi
 * @extends {BaseAPI}
 */
export class SpeakersApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpeakersApi
     */
    public getAllSpeakers(options?: AxiosRequestConfig) {
        return SpeakersApiFp(this.configuration).getAllSpeakers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpeakersApi
     */
    public getSpeaker(options?: AxiosRequestConfig) {
        return SpeakersApiFp(this.configuration).getSpeaker(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [search] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpeakersApi
     */
    public searchSpeakers(search?: string, options?: AxiosRequestConfig) {
        return SpeakersApiFp(this.configuration).searchSpeakers(search, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UnavailableDatesApi - axios parameter creator
 * @export
 */
export const UnavailableDatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebinarsModuleUnavailableDatesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/webinars-module/UnavailableDates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebinarsModuleUnavailableDatesIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1WebinarsModuleUnavailableDatesIdDelete', 'id', id)
            const localVarPath = `/api/v1/webinars-module/UnavailableDates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateUnavailableDateInput} [createUnavailableDateInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebinarsModuleUnavailableDatesPost: async (createUnavailableDateInput?: CreateUnavailableDateInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/webinars-module/UnavailableDates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUnavailableDateInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateUnavailableDateInput} [updateUnavailableDateInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebinarsModuleUnavailableDatesPut: async (updateUnavailableDateInput?: UpdateUnavailableDateInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/webinars-module/UnavailableDates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUnavailableDateInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UnavailableDatesApi - functional programming interface
 * @export
 */
export const UnavailableDatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UnavailableDatesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WebinarsModuleUnavailableDatesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WebinarsModuleUnavailableDatesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WebinarsModuleUnavailableDatesIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WebinarsModuleUnavailableDatesIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateUnavailableDateInput} [createUnavailableDateInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WebinarsModuleUnavailableDatesPost(createUnavailableDateInput?: CreateUnavailableDateInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WebinarsModuleUnavailableDatesPost(createUnavailableDateInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateUnavailableDateInput} [updateUnavailableDateInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WebinarsModuleUnavailableDatesPut(updateUnavailableDateInput?: UpdateUnavailableDateInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WebinarsModuleUnavailableDatesPut(updateUnavailableDateInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UnavailableDatesApi - factory interface
 * @export
 */
export const UnavailableDatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UnavailableDatesApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebinarsModuleUnavailableDatesGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiV1WebinarsModuleUnavailableDatesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebinarsModuleUnavailableDatesIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1WebinarsModuleUnavailableDatesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateUnavailableDateInput} [createUnavailableDateInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebinarsModuleUnavailableDatesPost(createUnavailableDateInput?: CreateUnavailableDateInput, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1WebinarsModuleUnavailableDatesPost(createUnavailableDateInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateUnavailableDateInput} [updateUnavailableDateInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebinarsModuleUnavailableDatesPut(updateUnavailableDateInput?: UpdateUnavailableDateInput, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1WebinarsModuleUnavailableDatesPut(updateUnavailableDateInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UnavailableDatesApi - object-oriented interface
 * @export
 * @class UnavailableDatesApi
 * @extends {BaseAPI}
 */
export class UnavailableDatesApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnavailableDatesApi
     */
    public apiV1WebinarsModuleUnavailableDatesGet(options?: AxiosRequestConfig) {
        return UnavailableDatesApiFp(this.configuration).apiV1WebinarsModuleUnavailableDatesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnavailableDatesApi
     */
    public apiV1WebinarsModuleUnavailableDatesIdDelete(id: string, options?: AxiosRequestConfig) {
        return UnavailableDatesApiFp(this.configuration).apiV1WebinarsModuleUnavailableDatesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateUnavailableDateInput} [createUnavailableDateInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnavailableDatesApi
     */
    public apiV1WebinarsModuleUnavailableDatesPost(createUnavailableDateInput?: CreateUnavailableDateInput, options?: AxiosRequestConfig) {
        return UnavailableDatesApiFp(this.configuration).apiV1WebinarsModuleUnavailableDatesPost(createUnavailableDateInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateUnavailableDateInput} [updateUnavailableDateInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnavailableDatesApi
     */
    public apiV1WebinarsModuleUnavailableDatesPut(updateUnavailableDateInput?: UpdateUnavailableDateInput, options?: AxiosRequestConfig) {
        return UnavailableDatesApiFp(this.configuration).apiV1WebinarsModuleUnavailableDatesPut(updateUnavailableDateInput, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * WebsiteApi - axios parameter creator
 * @export
 */
export const WebsiteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebinarsModuleWebsiteNextWebinarGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/webinars-module/Website/NextWebinar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebinarsModuleWebsitePastWebinarsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/webinars-module/Website/PastWebinars`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebsiteApi - functional programming interface
 * @export
 */
export const WebsiteApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebsiteApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WebinarsModuleWebsiteNextWebinarGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WebinarsModuleWebsiteNextWebinarGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WebinarsModuleWebsitePastWebinarsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WebinarsModuleWebsitePastWebinarsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WebsiteApi - factory interface
 * @export
 */
export const WebsiteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebsiteApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebinarsModuleWebsiteNextWebinarGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiV1WebinarsModuleWebsiteNextWebinarGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebinarsModuleWebsitePastWebinarsGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiV1WebinarsModuleWebsitePastWebinarsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WebsiteApi - object-oriented interface
 * @export
 * @class WebsiteApi
 * @extends {BaseAPI}
 */
export class WebsiteApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebsiteApi
     */
    public apiV1WebinarsModuleWebsiteNextWebinarGet(options?: AxiosRequestConfig) {
        return WebsiteApiFp(this.configuration).apiV1WebinarsModuleWebsiteNextWebinarGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebsiteApi
     */
    public apiV1WebinarsModuleWebsitePastWebinarsGet(options?: AxiosRequestConfig) {
        return WebsiteApiFp(this.configuration).apiV1WebinarsModuleWebsitePastWebinarsGet(options).then((request) => request(this.axios, this.basePath));
    }
}


